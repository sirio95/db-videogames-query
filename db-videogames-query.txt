--query con group by
--1)Contare quante software house ci sono per ogni paese
SELECT 
software_houses.country,
COUNT(software_houses.id) as numeroSoftwareHouse
FROM software_houses
GROUP BY country;

--2)Contare quante recensioni ha ricevuto ogni videogioco

SELECT
reviews.videogame_id as VideogameID,
COUNT(reviews.id) as numeroReview
FROM reviews
GROUP BY videogame_id
ORDER BY numeroReview DESC

--3)Contare quanti videogiochi hanno ciascuna classificazione PEGI 
SELECT
pegi_label_videogame.pegi_label_id as PEGI_ID,
COUNT(pegi_label_videogame.videogame_id) as NumeroVideogiochi
FROM pegi_label_videogame
GROUP BY pegi_label_id
ORDER BY PEGI_ID 

--4)Mostrare il numero di videogiochi rilasciati ogni anno 
SELECT
YEAR(videogames.release_date) as AnnoRilascio,
COUNT(videogames.id) as NumeroVideogiochi
FROM videogames
GROUP BY YEAR(videogames.release_date)
ORDER BY AnnoRilascio

--5)Contare quanti videogiochi sono disponbiili per ciascun device 

SELECT
device_videogame.device_id as DevideID,
COUNT(device_videogame.videogame_id) as NumeroVideogiochi
FROM device_videogame
GROUP BY device_id
ORDER BY DevideID

--6)Ordinare i videogame in base alla media delle recensioni
SELECT
reviews.videogame_id as VideogiochiID,
AVG(reviews.rating) as MediaVoti
FROM reviews
GROUP BY videogame_id
ORDER BY MediaVoti DESC, VideogiochiID


-- query con join
--1)Selezionare i dati di tutti giocatori  
--che hanno scritto almeno una recensione, 
--mostrandoli una sola volta 

SELECT DISTINCT players.*
FROM players
INNER JOIN reviews
ON reviews.player_id = players.id
ORDER BY players.id


--2) Sezionare tutti i videogame dei tornei tenuti nel 2016, 
--mostrandoli una sola volta 

SELECT *
FROM videogames
WHERE videogames.id IN (
SELECT DISTINCT videogames.id
FROM videogames
INNER JOIN tournament_videogame
ON videogames.id = tournament_videogame.videogame_id
INNER JOIN tournaments
ON tournaments.id = tournament_videogame.tournament_id
WHERE tournaments.year LIKE '2016%' 
)


--3) Mostrare le categorie di ogni videogioco

SELECT *
FROM categories 
INNER JOIN category_videogame
ON categories.id = category_videogame.category_id
INNER JOIN videogames
ON videogames.id = category_videogame.videogame_id
ORDER BY categories.id, categories.name

--4)Selezionare i dati di tutte le software house che hanno 
--rilasciato almeno un gioco dopo il 2020, 
--mostrandoli una sola volta

SELECT DISTINCT software_houses.*
FROM software_houses
INNER JOIN videogames
ON videogames.software_house_id = software_houses.id
WHERE videogames.release_date >= '2020' 


--5) Selezionare i premi ricevuti da ogni software house 
--per i videogiochi che ha prodotto

SELECT 
software_houses.name as SoftwareHouseName,
COUNT(awards.id) as NumeroPremi
FROM software_houses, awards
INNER JOIN award_videogame
ON award_videogame.award_id = awards.id
INNER JOIN videogames
ON videogames.id = award_videogame.videogame_id
GROUP BY software_houses.name
	
--6)Selezionare categorie e classificazioni PEGI dei videogiochi 
--che hanno ricevuto recensioni da 4 e 5 stelle, 
--mostrandole una sola volta

--QUESTA FUNZIONA MA NON DA NUMERO CORRETTO

--SELECT DISTINCT 
--categories.name as Categoria,
--pegi_labels.name as PEGI
--FROM categories, pegi_labels
--WHERE EXISTS (
--SELECT * 
--FROM categories
--INNER JOIN category_videogame
--ON category_videogame.category_id = categories.id
--INNER JOIN videogames
--ON videogames.id = category_videogame.videogame_id
--INNER JOIN reviews
--ON reviews.videogame_id = videogames.id
--WHERE reviews.rating = 4 OR reviews.rating = 5
--) AND EXISTS (
--SELECT *
--FROM pegi_labels
--INNER JOIN pegi_label_videogame
--ON pegi_label_videogame.pegi_label_id = pegi_labels.id
--INNER JOIN videogames
--ON videogames.id = pegi_label_videogame.videogame_id
--INNER JOIN reviews
--ON reviews.videogame_id = videogames.id
--WHERE reviews.rating = 4 OR reviews.rating = 5
--)

SELECT DISTINCT 
categories.name as Categoria,
pegi_labels.name as PEGI
FROM categories, pegi_labels
WHERE categories.id IN (
SELECT categories.id 
FROM categories
INNER JOIN category_videogame
ON category_videogame.category_id = categories.id
INNER JOIN videogames
ON videogames.id = category_videogame.videogame_id
INNER JOIN reviews
ON reviews.videogame_id = videogames.id
WHERE reviews.rating = 4 OR reviews.rating = 5
) AND pegi_labels.id IN (
SELECT pegi_labels.id
FROM pegi_labels
INNER JOIN pegi_label_videogame
ON pegi_label_videogame.pegi_label_id = pegi_labels.id
INNER JOIN videogames
ON videogames.id = pegi_label_videogame.videogame_id
INNER JOIN reviews
ON reviews.videogame_id = videogames.id
WHERE reviews.rating = 4 OR reviews.rating = 5
)

--SELECT DISTINCT videogames.id
--FROM videogames
--INNER JOIN reviews
--ON reviews.videogame_id = videogames.id
--WHERE reviews.rating >= 4
--ORDER BY videogames.id





--7) Selezionare quali giochi erano presenti nei tornei nei 
--quali hanno partecipato i giocatori il cui nome inizia per 'S'

SELECT videogames.*
FROM videogames
WHERE videogames.id IN (
SELECT DISTINCT videogames.id
FROM videogames
INNER JOIN tournament_videogame
ON tournament_videogame.videogame_id = videogames.id
INNER JOIN tournaments
ON tournaments.id = tournament_videogame.tournament_id
INNER JOIN player_tournament
ON player_tournament.tournament_id = tournaments.id
INNER JOIN players
ON players.id = player_tournament.player_id
WHERE players.name LIKE 'S%'
)

--8) Selezionare le città in cui è stato giocato il gioco dell'anno del 2018 
SELECT tournaments.city
FROM tournaments
INNER JOIN tournament_videogame
ON tournament_videogame.tournament_id = tournaments.id
INNER JOIN videogames
ON videogames.id = tournament_videogame.videogame_id
INNER JOIN award_videogame
ON award_videogame.videogame_id = videogames.id
INNER JOIN awards
ON awards.id = award_videogame.award_id
WHERE awards.name LIKE '%anno' AND award_videogame.year = 2018

--9) Selezionare i giocatori che hanno giocato al gioco più atteso del 2018 in un torneo del 2019

Select *
FROM players
INNER JOIN player_tournament
ON player_tournament.player_id = players.id
INNER JOIN tournaments
ON tournaments.id = player_tournament.tournament_id
INNER JOIN tournament_videogame
ON tournament_videogame.tournament_id = tournaments.id
INNER JOIN videogames
ON videogames.id = tournament_videogame.videogame_id
INNER JOIN award_videogame
ON award_videogame.videogame_id= videogames.id
INNER JOIN awards
ON awards.id = award_videogame.award_id
WHERE awards.name= 'Gioco più atteso' AND award_videogame.year = 2018 AND tournaments.year = 2019


--10) Selezionare i dati della prima software house che ha rilasciato un gioco, 
--assieme ai dati del gioco stesso 
SELECT 
software_houses.*
FROM software_houses
INNER JOIN videogames
ON videogames.software_house_id = software_houses.id 
WHERE videogames.release_date = (
SELECT
MIN(videogames.release_date)
FROM videogames
)


--11)Selezionare i dati del videogame (id, name, release_date, totale recensioni) con più recensioni

SELECT 
videogames.*,
COUNT(reviews.videogame_id) as TotaleRecensioni 
FROM videogames
INNER JOIN reviews
ON reviews.videogame_id = videogames.id
HAVING COUNT(reviews.videogame_id) = 
(SELECT MAX(mycount.mycount) FROM (
SELECT COUNT(reviews.videogame_id) as mycount
FROM reviews) mycount)


-- SINGOLA TABELLA

--1)Selezionare tutte le software house americane

SELECT * FROM software_houses WHERE software_houses.country LIKE 'United%';

--2)Selezionare tutti i giocatori della città di 'Rogahnland'
SELECT * FROM players WHERE players.city = 'Rogahnland';

--3- Selezionare tutti i giocatori il cui nome finisce per "a"
SELECT * FROM players WHERE players.name LIKE '%a';

--4- Selezionare tutte le recensioni scritte dal giocatore con ID = 800
SELECT * FROM reviews WHERE reviews.player_id = 800;

--5- Contare quanti tornei ci sono stati nell'anno 2015
SELECT COUNT(tournaments.id) as NumeroTornei FROM tournaments WHERE tournaments.year = 2015;

--6- Selezionare tutti i premi che contengono nella descrizione la parola 'facere' 
SELECT * FROM awards WHERE awards.description LIKE '%facere%';

--7- Selezionare tutti i videogame che hanno la categoria 2 (FPS) o 6 (RPG), mostrandoli una sola volta 
SELECT DISTINCT videogames.id 
FROM videogames 
INNER JOIN category_videogame
ON category_videogame.videogame_id = videogames.id 
WHERE category_videogame.category_id = 2 OR category_videogame.category_id = 6;

--8- Selezionare tutte le recensioni con voto compreso tra 2 e 4
SELECT * FROM reviews WHERE reviews.rating >= 2 AND reviews.rating <= 4;

--9- Selezionare tutti i dati dei videogiochi rilasciati nell'anno 2020

SELECT * FROM videogames WHERE videogames.release_date LIKE '%2020';

--10- Selezionare gli id dei videogame che hanno ricevuto almeno una recensione da stelle, mostrandoli una sola volta

SELECT DISTINCT videogames.id 
FROM videogames 
INNER JOIN reviews 
ON reviews.videogame_id = videogames.id
WHERE reviews.rating = 5;

--11- Selezionare il numero e la media delle recensioni per il videogioco con ID = 412 
SELECT 
COUNT(reviews.id) as NumeroRecensioni,
AVG(reviews.rating) as MediaVoto
FROM reviews
WHERE reviews.videogame_id = 412;

--12- Selezionare il numero di videogame che la software house con ID = 1 ha rilasciato nel 2018

SELECT 
COUNT(videogames.id) as NumeroVideogiochi
FROM videogames
WHERE videogames.software_house_id = 1 AND videogames.release_date LIKE '%/2018';